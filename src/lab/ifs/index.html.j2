{% extends "_tpls/page-lab.html.j2" %}
{% set current_page = "ifs" %}
{% block title %}Iterated Function Systems{% endblock %}

{% block head %}
  <style>

    /* custom */
    canvas {
      margin: auto;
      display: block;
      width: 700px;
      height: 700px;
    }

    .matrix {
      display: grid;
      gap: 4px;
      padding: 4px;
      border-width: 2px ;
      border-style: solid;
      margin-bottom: 8px;
    }

    /* an attempt to make multi-line square brackets */
    .m2x2 {

      grid-template-columns: 1fr 1fr;

      border-image: linear-gradient(
      to right,
      #3c8cd2 5%,
      transparent 5%,
      transparent 95%,
      #3c8cd2 95%
      ) 10;
    }

    .m2x1 {
      grid-template-columns: 1fr;
      border-image: linear-gradient(
      to right,
      #3c8cd2 10%,
      transparent 10%,
      transparent 90%,
      #3c8cd2 90%
      ) 10;
    }

    .row {
      display: flex;
    }

    input {
      max-width: 3ch;
    }

    .matrix input {
      max-width: 9ch;
    }


    /* side by side mode */
    .playground {
      display: flex;
      flex-direction: row;
      width: 100% !important;
      max-width: 100%;
      height: calc(100vh - 19px);
      box-sizing: border-box;
      padding-top: 10px;

      font-size: 14px !important;
    }

    .playground button, .playground input {
      font-size:14px;
    }

    .playground h1, .playground p {
      display: none;
    }

    .playground canvas {
      width: 100%;
      flex: 1;
      height: auto;
      overflow: hidden;
      padding-bottom: 10px;
      padding-left: 10px;
    }

    .playground .left-column {
      flex-direction: column;
      display: flex;
      flex: 1;
    }

    .playground .right-column {
      padding: 0 8px;
    }

    .playground .presets {
      grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));
    }

    .left-column {
      margin-bottom: 16px;
    }


    .presets {
      display: grid;
      gap: 8px;
      grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
      margin: 16px 0;
    }
  </style>
{% endblock %}
{% block content %}
  <p>
    Iterated function systems are a set of affine transformations
    that are then called repeatedly and at random. These systems
    often result in self-similar fractals. You can see a few
    examples below, and also play with the transformations to see
    what effect it has.
    Check out <a
      href="https://en.wikipedia.org/wiki/Iterated_function_system">Iterated
      function systems</a> and <a
      href="https://en.wikipedia.org/wiki/Barnsley_fern">Barnsley
      fern</a> on Wikipedia for more details.
  </p>
  <div class="left-column">
      <div class="presets">
        <button class="active" id="barnsley">Barnsley</button>
        <button id="sierpinski">Sierpinski</button>
        <button id="pentigre">Pentigre</button>
        <button id="pine">Pine</button>
        <button id="dragon">Dragon</button>
        <button id="crystal">Crystal</button>
        <button id="tree">Tree</button>
      </div>
    <canvas id="canvas" width="700" height="700"></canvas>
  </div>
  <div class="right-column">
    <div class="ifs-form" id="functions">
      <table>
        <thead>
          <tr>
            <th>Probability</th>
            <th class="align-center">Transform</th>
            <th class="align-center"></th>
            <th class="align-center">Translate</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="f in fractal.ifs">
            <td>
              <input type="text" v-model.number="f.p" />%
            </td>
            <td class="align-center">
              <div class="matrix m2x2">
                  <input type="text" v-model.number="f.transform[0]" />
                  <input type="text" v-model.number="f.transform[1]" />
                  <input type="text" v-model.number="f.transform[2]" />
                  <input type="text" v-model.number="f.transform[3]" />
              </div>
            </td>
            <td class="align-center">&times;</td>
            <td class="align-center">
              <div class="matrix m2x1">
                  <input type="text" v-model.number="f.translate[0]" />
                  <input type="text" v-model.number="f.translate[1]" />
              </div>
            </td>
          </tr>
        </tbody>
      </table>
      <div class="align-center pvl">
        <button v-on:click="addTransform">Add Transformation</button>
        <button v-on:click="removeTransform">Remove Last Transformation</button>

        <div class="checkbox">
          <input id="playground" v-model="playground" value="playground" type="checkbox">
          <label for="playground">Playground Mode</label>
        </div>
      </div>
    </div>
  </div>
{% endblock %}

{% block javascript %}
  <script src="../js/vendor/vue.min.js"></script>
  <script src="../js/canvas.js"></script>
  <script src="../js/runner.js"></script>
  <script src="../js/unikitty.js"></script>
  <script src="ifs.js"></script>
  <script src="main.js"></script>
{% endblock %}
