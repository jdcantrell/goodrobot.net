{% extends "_tpls/page-lab.html.j2" %}
{% set current_page = "chaos" %}
{% block title %}Chaos Game{% endblock %}

{% block head %}
<style>

  /* custom */
  #canvas {
    margin: auto;
    display: block;
    width: 700px;
    height: 700px;
  }

  input {
    max-width: 3em;
  }

</style>
{%endblock%}

{% block content %}
{% raw %}
<h1>Chaos Game</h1>
<p>
  The Chaos Game is another way to generate fractals. In a lot of ways it is similar to IFS
  fractals.
</p>
<canvas id="canvas" width="700" height="700"></canvas>

<div class="flex-container row">
  <canvas style="display:none" id="ruleCanvas" width="200" height="200"></canvas>
  <div class="flex-1" id="ruleLegend"></div>
</div>

<div class="" id="settings">
  <div>
    <label for="sides">Points: </label>
    <input id="sides" v-model.number="sides" type="text" value="4">
  </div>
  <div>
    <label for="distance">Move Distance:</label>
    <input id="distance" v-model.number="distance" type="text" value="0.5">
  </div>
  <div v-if="rules && rules.length">
    The next point cannot be n vertices away:
      <ul class="list-inline" v-for="(rule, index) in rules" :key="index">
        <li class="hover-hide" v-for="pIdx in sides" :key="pIdx">
          <label class="checkbox"><input type="checkbox" value="true" v-model="rule[pIdx - 1]">{{ pIdx - 1 }}</label>
        </li>
        <td class="visible-on-hover"><button v-on:click="removeRule(index)">Remove</button></td>
    </ul>
  </div>
  <div class="align-center" v-else>The next point will be randomly choosen</div>
  <div class="align-center">
    <td colspan="4"><button v-on:click="addRule">Add rules for next previous point</button></td>
  </div>
</div>
{% endraw %}
{% endblock %}


{% block javascript %}
<script src="../js/vendor/vue.min.js"></script>
<script src="../js/canvas.js"></script>
<script src="../js/runner.js"></script>
<script src="../js/unikitty.js"></script>
<script src="chaos.js"></script>
<script>
  const renderChaos = (rawRules, distanceStr, sidesStr) => {
    const rules = rawRules.map(r => {
      return Object.keys(r).reduce(
        ((invalids, key) => {
        if (r[key]) { invalids.push(parseInt(key, 10)); }
        return invalids;
      }),
      []
      );
    });
    const distance = parseFloat(distanceStr);
    const sides = parseInt(sidesStr, 10)
    if (!isNaN(distance) && distance > 0 && !isNaN(sides) && sides > 0) {
      render(sides, rules, move(distance));
    }
  }

  const ui = new Vue({
    el: '#settings',
    data: {
      sides: 10,
      distance: 0.5,
      rules: [
        {0: true, 1: true, 2: true, 3: true, 5: true, 8: true }
      ]
    },
    watch: {
      sides: function () {
        this.rules = this.rules.map(rule => {
          const r = {};
          for (var i = 0; i < this.sides; i += 1) {
            r[i] = !!rule[i];
          }
          return r;
        });
      },
      distance: function () {
        renderChaos(this.rules, this.distance, this.sides);
      },
      rules: {
        handler: function ruleHandler() {
          renderChaos(this.rules, this.distance, this.sides);
        },
        deep: true
      }
    },
    methods: {
      updateRule: function (ruleIndex, point, event) {
        console.log(event.target.checked, this.rules[ruleIndex]);
        this.rules[ruleIndex][point] = event.target.checked;
      },
      addRule: function () {
        this.rules.push({ });
      },
      removeRule: function (idx) {
        this.rules.splice(idx, 1);
      }
    }
  });
</script>
{% endblock %}
